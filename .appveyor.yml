version: 0.5.{build}

shallow_clone: true

image: Visual Studio 2015

branches:
    only:
        - master

platform:
    - x64

environment:
   matrix:
      - PYTHON_VERSION: "3.6"
        ARCH: 64
        MINICONDA: "C:\\Miniconda3-x64"
        # MINGW: "C:\\mingw-w64\\x86_64-7.2.0-posix-seh-rt_v5-rev1\\mingw64\\bin"
        MINGW: "C:\\mingw-w64\\x86_64-6.3.0-posix-seh-rt_v5-rev1\\mingw64\\bin"

init:
    - echo %PYTHON_VERSION% %MINICONDA% %ARCH%

install:
    - set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%
    - set PATH=%MINGW%;%PATH%
    - conda config --set always_yes yes
    - conda config --set changeps1 no
    - conda config --set anaconda_upload no
    - conda install -q python=%PYTHON_VERSION% pip conda-build conda-verify numpy
    - echo [build]           >> %MINICONDA%\Lib\distutils\distutils.cfg
    - echo compiler=mingw32  >> %MINICONDA%\Lib\distutils\distutils.cfg
    - python setup.py build_ext
    - python setup.py build_ext --inplace
    # - python setup.py install
    - conda build .
    - conda install --use-local capytaine
    - move %MINICONDA%\conda-bld\win-%ARCH%\capytaine*.tar.bz2 .\ # Copy the build output to be catched as artifact

build: off

before_test:
    - conda install -q pytest

test_script:
    - pytest

artifacts:
    # Archive the generated conda package in the ci.appveyor.com build report.
    - path: '*.tar.bz2'
